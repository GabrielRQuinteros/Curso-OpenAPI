/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Beer;
import io.swagger.model.BeerOrder;
import io.swagger.model.BeerPageList;
import io.swagger.model.Customer;
import io.swagger.model.CustomerPageList;
import io.swagger.model.LoginRequest;
import io.swagger.model.LoginResponse;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-04-22T16:13:55.210790119Z[GMT]")
@Validated
public interface V1Api {

    @Operation(summary = "Crear Cerveza", description = "Crea una cerveza", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Cerveza creada"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/beers",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createBeerV1(@Parameter(in = ParameterIn.DEFAULT, description = "Informacion de la cerveza", required=true, schema=@Schema()) @Valid @RequestBody Beer body
);


    @Operation(summary = "Nuevo cliente", description = "Agregar un Nuevo cliente", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Cliente creado"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/customers",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createCustomer(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Customer body
);


    @Operation(summary = "Eliminar Cerveza por Id", description = "Elimina del Sistema una Cerveza segun su Id", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cerveza Eliminada"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/v1/beers/{beerId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBeerV1(@Parameter(in = ParameterIn.PATH, description = "Id de Cerveza", required=true, schema=@Schema()) @PathVariable("beerId") UUID beerId
);


    @Operation(summary = "Elimina un Cliente por Id", description = "Elimina un Cliente del Sistema por Id", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cliente Eliminado"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/v1/customers/{customerId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCustomerByIdV1(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("customerId") UUID customerId
);


    @Operation(summary = "Obtener Cerveza por Id", description = "Obtiene una ***Cerveza*** cuyo id sea el  suministrado.", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cerveza encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Beer.class))),
        
        @ApiResponse(responseCode = "404", description = "Cerveza no encontrada") })
    @RequestMapping(value = "/v1/beers/{beerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Beer> getBeerByIdV1(@Parameter(in = ParameterIn.PATH, description = "Id de Cerveza", required=true, schema=@Schema()) @PathVariable("beerId") UUID beerId
);


    @Operation(summary = "Obtener Cliente por Id", description = "Obtiene un ***Cliente*** cuyo id sea el  suministrado.", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cliente encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/v1/customers/{customerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Customer> getCustomerByIdV1(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("customerId") UUID customerId
);


    @Operation(summary = "Obtener Lista de Cervezas", description = "Devuelve una Lista de Cervezas paginada por tamaño y número de pagina.", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de Cervezas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BeerPageList.class))) })
    @RequestMapping(value = "/v1/beers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BeerPageList> listBeersV1(@Parameter(in = ParameterIn.QUERY, description = "Numero de Pagina" ,schema=@Schema( defaultValue="1")) @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber
, @Parameter(in = ParameterIn.QUERY, description = "Tamaño de Pagina" ,schema=@Schema( defaultValue="30")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="30") Integer pageSize
, @Parameter(in = ParameterIn.QUERY, description = "Prueba de un Parametro deprecado" ,schema=@Schema()) @Valid @RequestParam(value = "deprecated-parameter", required = false) String deprecatedParameter
);


    @Operation(summary = "Obtener Lista de Clientes paginado", description = "Devuelve una lista de clientes paginada, pudiendo especificar el tamaño y el número de página.", tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de Clientes", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerPageList.class))) })
    @RequestMapping(value = "/v1/customers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomerPageList> listCustomersV1(@Parameter(in = ParameterIn.QUERY, description = "Numero de Pagina" ,schema=@Schema( defaultValue="1")) @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber
, @Parameter(in = ParameterIn.QUERY, description = "Tamaño de Pagina" ,schema=@Schema( defaultValue="30")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="30") Integer pageSize
);


    @Operation(summary = "Muestra de un enpoint deprecado  + Resumen de Endpoint", description = "", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Deprecateds" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Facturas de Compras", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/v1/invoices",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> listInvoicesV1();


    @Operation(summary = "Login", description = "Permite loguearse en la aplicacion", tags={ "Authentication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Login exitoso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LoginResponse.class))),
        
        @ApiResponse(responseCode = "201", description = "Unauthorized") })
    @RequestMapping(value = "/v1/login",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<LoginResponse> loginV1(@Parameter(in = ParameterIn.DEFAULT, description = "Credenciales de Usuario", required=true, schema=@Schema()) @Valid @RequestBody LoginRequest body
);


    @Operation(summary = "Actualizar Cerveza", description = "Actualiza la informacion de una Cerveza", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Cerveza Actualizada"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/beers/{beerId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateBeerV1(@Parameter(in = ParameterIn.PATH, description = "Id de Cerveza", required=true, schema=@Schema()) @PathVariable("beerId") UUID beerId
, @Parameter(in = ParameterIn.DEFAULT, description = "Informacion de la cerveza", required=true, schema=@Schema()) @Valid @RequestBody Beer body
);


    @Operation(summary = "Actualiza el Cliente", description = "Actualiza la informacion asociada a un Clienet", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Cliente actualizado"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/customers/{customerId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCustomerV1(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("customerId") UUID customerId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Customer body
);


    @Operation(summary = "", description = "Soliciar Orden de Compra", security = {
        @SecurityRequirement(name = "JWTAuthToken")    }, tags={ "Orders Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Orden de compra creada"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/customers/{customerId}/orders",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> v1CustomersCustomerIdOrdersPost(@Parameter(in = ParameterIn.PATH, description = "Customer Id", required=true, schema=@Schema()) @PathVariable("customerId") UUID customerId
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody BeerOrder body
);

}

